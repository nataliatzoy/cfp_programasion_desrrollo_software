---
import type { GetStaticPaths } from "astro";
// import type {pokemonListResponse} from "../../interfaces/pokemon-list.response"
import type { pokemonListResponse } from "@interfaces/pokemon-list.response";
// import PokemonsCards from "src/components/pokemons/pokemonsCards.astro";

import {Icon} from 'astro-icon/components'

import PokemonsCards from "@components/pokemons/pokemonsCards.astro";
// import MainLayout from '../../layouts/MainLayout.astro';
import MainLayout from "@layouts/MainLayout.astro";
import Title from "@components/shared/Title.astro";


export const getStaticPaths = (async() => {

const resp = await fetch('https://pokeapi.co/api/v2/pokemon/?limit=151');
const {results} = await resp.json() as pokemonListResponse;

return results.map(({name,  url}) =>({
    params: { name },
    props: { name: name, url: url }
}));


// return [
//     {params: {name: 'bulbasaur'}, props: {name: 'bulbasaur', url: 'https://pokeapi.co/api/v2/pokemon/1/'}},
//     {params: {name: 'charmander'}, props: {name: 'charmander', url: 'https://pokeapi.co/api/v2/pokemon/4/'}},
//     {params: {name: 'raticate'} , props: {name: 'raticate', url: 'https://pokeapi.co/api/v2/pokemon/20/'}},

// ];
}) satisfies GetStaticPaths;

const {name} = Astro.params;
const {url} = Astro.props;
const id = url.split('/').at(-2);
const audioSrc = `https://raw.githubusercontent.com/PokeAPI/cries/main/cries/pokemon/latest/${id}.ogg`;
const imageScr = `https://raw.githubusercontent.com/PokeAPI/sprites/master/sprites/pokemon/other/official-artwork/${id}.png`

---

<MainLayout title={`pokémon - #${id} ${name}`}
description={`Informacion sobre el pokémon ${name}`}
image={imageScr}
>
<section class="mt-10 mx-auto flex flex-col justify-center items-center w-1/3 h-1/3 ">
    
    <div class="flex flex-row ">
    </div>
    <div>
        <!-- <a href="/">Regresar</a> -->
         <button  onclick="history.back()" class="ml-4 text-blue-500">Regresar</button>
        <Title>{name}</Title>
        <!-- <h1 class="text-5xl capitalize">{name}</h1> -->
    </div>

    <button id="btn-favorite" class="ml-4" data-name={name} data-id={id}>
        <Icon data-outline name="heart-outline"  size={50}/>
        <Icon data-full class='hidden' name="heart-full"  size={50}/>

    </button>

    <PokemonsCards name = {name} url= {url} isBig = {true} />
    
    <audio controls class="mt-5">
        <source src={audioSrc} type="audio/ogg"/>
        Your browser does not support the audio element.
    </audio>
    
</section>
</MainLayout>


<script>
    // interface FavoritePokemon {
    //     name: string;
    //     id: number;
    // }

import type { FavoritePokemon } from "@interfaces/favorite-pokemons";

    // document.addEventListener('astro:before-preparation',() =>{
    //     console.log('astro:before-preparation');
    // });

    // document.addEventListener('astro:after-preparation',() =>{
    //     console.log('astro:after-preparation');
    // });

    // document.addEventListener('astro:before-swap',() =>{
    //     console.log('astro:before-swap');
    // });

    // document.addEventListener('astro:after-swap',() =>{
    //     console.log('astro:after-swap');
    // });

    // document.addEventListener('astro:page-load', ()=>{
    //     console.log('Hola');
    // });
    // { once: true}
// );

    const handlePageLoad = () => {
        let favoritePokemons: FavoritePokemon[] = JSON.parse(
            localStorage.getItem('favorites') ?? '[]'
        );
        console.log('favotirePokemon');
        
        const btnFavorite = document.querySelector('#btn-favorite') as HTMLButtonElement;

        if (!btnFavorite) return;

        const name = btnFavorite.dataset.name ?? '';
        const id = btnFavorite.dataset.id ?? '';
        // console.log(name, id);
        const isFavorite = favoritePokemons.some((fav) => fav.name === name);
        

        const heartOutline = btnFavorite.querySelector('[data-outline]') as HTMLElement;
        const heartFull = btnFavorite.querySelector('[data-full]') as HTMLElement;

        if(isFavorite){
            heartOutline.classList.add('hidden');
            heartFull.classList.remove('hidden');

        }

        const toggleFavorite = () => {
            const isFavorite = favoritePokemons.some((fav) => fav.name === name);
            if (isFavorite) {
                // Remover
                favoritePokemons = favoritePokemons.filter((fav) => fav.name !== name)
            }else{
                // Agregar
                favoritePokemons.push({
                    id: +id,
                    name: name
                });
            }

            localStorage.setItem('favorites',JSON .stringify(favoritePokemons));
        };

        btnFavorite.addEventListener('click', ()=>{
            // console.log({name, id});
            heartOutline.classList.toggle('hidden');
            heartFull.classList.toggle('hidden');

            toggleFavorite();
        });
    };


    document.addEventListener('astro:page-load', handlePageLoad);

   
</script>

<style>
a{
    @apply hover:underline text-blue-500
}

#btn-favorite {
    @apply hover:animate-pulse;
}
</style>